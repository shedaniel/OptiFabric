buildscript {
	repositories {
		jcenter()
		maven {
			name = 'Fabric'
			url = 'https://maven.fabricmc.net/'
		}
	}
	dependencies {
		classpath "net.fabricmc:fabric-loom:0.4-SNAPSHOT"
	}
}

apply plugin: net.fabricmc.loom.LoomGradlePlugin
apply plugin: 'maven-publish'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	mavenCentral()
	maven {
		name "Modmuss50 Repository"
		url 'https://maven.fabricmc.net/'
	}
	maven { url "https://dl.bintray.com/shedaniel/shedaniel-mods" }
	maven { url 'https://jitpack.io' }
    maven { url 'https://www.cursemaven.com' }
    flatDir {
        dirs 'jars'
    }
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modCompile "net.fabricmc:fabric-loader:${project.loader_version}"

	modCompile "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	
	modCompile "com.github.Chocohead:Fabric-ASM:${project.fabric_asm_version}"
	include "com.github.Chocohead:Fabric-ASM:${project.fabric_asm_version}"

	//Used to handle the zip processing
	compile "org.zeroturnaround:zt-zip:${project.zt_zip_version}"
	include "org.zeroturnaround:zt-zip:${project.zt_zip_version}"

	//Required for zt-zip, kinda annoying
	include "org.slf4j:slf4j-simple:${project.slf4j_version}"
	include "org.slf4j:slf4j-api:${project.slf4j_version}"

	modRuntime "io.github.prospector:modmenu:1.14.5+build.30"
    
	modRuntime "me.shedaniel:RoughlyEnoughItems:4.5.4"
	modCompileOnly("me.shedaniel.cloth.api:cloth-client-events-v0:1.0.4") {
		transitive(false)
	}

    modRuntime "curse.maven:lithium:3000628"
    modRuntime "curse.maven:phosphor:2987621"

    fileTree(dir: 'jars', include: '*.jar').each {
        String baseName = it.name.replace(".jar", "")
        String version = "0.1.0"
        int split = baseName.lastIndexOf('-')

        if (split != -1) {
            version = baseName.substring(split + 1)
            baseName = baseName.substring(0, split)
        }

        String name = "testmod:${baseName}:${version}"

        System.out.println("Found test mod: " + it.name.replace(".jar", "") + " -> " + name)

        modCompileOnly name
        modRuntime name
    }
}

task unzip(type: Copy) {
	def zipFile = file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar")
	def outputDir = file("${buildDir}/unpacked/dist")

	if(outputDir.exists()){
		outputDir.deleteDir()
	}

	from zipTree(zipFile)
	into outputDir
}

processResources {
	inputs.property "version", project.version

	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand "version": project.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

jar {
	from "LICENSE"
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}